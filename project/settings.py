"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gb#jy*ves$x^frghwy1!ar%$+@w)egfvn)v0@8qvdbfqt9^6p('

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*'] # Allow all hosts temporarily (update later for production)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'portfolio'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIR = [
    BASE_DIR / "static"   # this assume that you have static directory in your project's root
]

# to collect all the static files (only for production)
# python manage.py collectstatic
STATIC_ROOT = BASE_DIR / "staticfiles"


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#  Step 5 is crucial for handling media files, such as profile pictures, in Django. Here's why it's important:

# 1. **MEDIA_URL**: This setting defines the base URL that serves the media files. By setting `MEDIA_URL = '/media/'`, you instruct Django to serve media files at this URL. For example, if your media file is named `profile_pic.jpg`, it would be accessible at `http://yourdomain.com/media/profile_pic.jpg`.

# 2. **MEDIA_ROOT**: This setting defines the absolute filesystem path to the directory where the media files are stored. By setting `MEDIA_ROOT = os.path.join(BASE_DIR, 'media')`, you specify that the media files will be stored in a directory named `media` located at the base directory of your project.

# Without configuring these settings, Django wouldn't know where to store the uploaded files or how to serve them to users. By setting up `MEDIA_URL` and `MEDIA_ROOT`, you ensure that the profile pictures (and any other media files) are stored correctly and accessible through the web.

# Hereâ€™s how it fits into the bigger picture:
# - **File Storage**: When a user uploads a profile picture, it needs to be stored somewhere on the server. `MEDIA_ROOT` ensures the files are stored in a designated directory.
# - **Serving Files**: Users need to be able to view and access the uploaded files. `MEDIA_URL` allows Django to serve these files correctly by mapping the URL to the file storage path.

# This configuration is essential for handling any media files in a Django application. If you have any more questions or need further assistance, feel free to ask!

# Media settings
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# admin:passwd naga90:naga@90


# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com' # gmail
EMAIL_PORT = 587 # for TLS encryption
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'sainaga90@gmail.com'
EMAIL_HOST_PASSWORD = 'sybc tuvh unmt uhvl'
DEFAULT_FROM_EMAIL = 'sainaga90@gmail.com'